import { promises } from 'fs'
import { join } from 'path'
import fetch from 'node-fetch'
}
    await conn.sendMessage(m.chat, { react: { text: '🦌', key: m.key } })

const defaultMenu = {
  before: `
       > 𝐀𝐋𝐀𝐒𝐓𝐎𝐑 𝐁𝐎𝐓 𝐁𝐘 𝐀𝐒𝐓𝐑𝐀𝐋
      𐂂𝚃𝙷𝙴 𝚁𝙰𝙳𝙸𝙾 𝙱𝙾𝚃𐂂
    𝐁𝐈𝐄𝐍𝐕𝐄𝐍𝐈𝐃𝐎 𝐀𝐋 𝐒𝐇𝐎𝐖 ${taguser}
> ╔> 𝐈𝐍𝐅𝐎 𝐃𝐄 𝐋𝐀 𝐓𝐑𝐀𝐍𝐒𝐌𝐈𝐒𝐈𝐎𝐍
> ╠> 𐂂ғᴇᴄʜᴀ:${date}
> ╠> 𐂂ᴅɪᴀ:${week}
> ╠> 𐂂ᴏʏᴇɴᴛᴇs:${totalusr}
> ╠> 𐂂ᴛɪᴇᴍᴘᴏ ᴀʟ ᴀɪʀᴇ:${uptime}
> ╚> 𝐒𝐈𝐆𝐀𝐍 𝐒𝐈𝐍𝐓𝐎𝐍𝐈𝐙𝐀𝐃𝐎𝐒
> ╔══════⬤▲•𐂂
> ╠𝐎𝐖𝐍𝐄𝐑
> ╠> ${usedPrefix}owner
> ╠𝐇𝐄𝐑𝐑𝐀𝐌𝐈𝐄𝐍𝐓𝐀𝐒
> ╠> ${usedPrefix}readviewonce imagen
> ╠> ${usedPrefix}encuesta
> ╠> ${usedPrefix}document
> ╠> ${usedPrefix}inspect
> ╠> ${usedPrefix}hd
> ╠> ${usedPrefix}calc
> ╠> ${usedPrefix}morce code/decode
> ╠> ${usedPrefix}chatvoz
> ╠> ${usedPrefix}tamaño
> ╠> ${usedPrefix}short link
> ╠> ${usedPrefix}shazam
> ╠> ${usedPrefix}ss
> ╠> ${usedPrefix}readqr
> ╠> ${usedPrefix}topdf
> ╠> ${usedPrefix}fake
> ╠> ${usedPrefix}tomp3
> ╠> ${usedPrefix}tourl
> ╠> ${usedPrefix}toptt
> ╠> ${usedPrefix}togifaud
> ╠> ${usedPrefix}igstalk
> ╠> ${usedPrefix}tiktokstalk
> ╠> ${usedPrefix}qr
> ╠> ${usedPrefix}spotifydl
> ╠> ${usedPrefix}whatsappstalk
> ╠> ${usedPrefix}clima
> ╠> ${usedPrefix}letra
> ╠𝐒𝐓𝐈𝐂𝐊𝐄𝐑𝐒
> ╠> ${usedPrefix}s responde a una imagen
> ╠> ${usedPrefix}sinfondo
> ╠> ${usedPrefix}smeme
> ╠𝐈𝐍𝐓𝐄𝐋𝐈𝐆𝐄𝐍𝐂𝐈𝐀 𝐀𝐑𝐓𝐈𝐅𝐈𝐂𝐈𝐀𝐋
> ╠> ${usedPrefix}bard pregunta
> ╠> ${usedPrefix}alastor texto
> ╠> ${usedPrefix}bimg imagen
> ╠> ${usedPrefix}crea
> ╠𝐃𝐄𝐒𝐂𝐀𝐑𝐆𝐀𝐒
> ╠> ${usedPrefix}playdoc cancion
> ╠> ${usedPrefix}tiktok enlace
> ╠> ${usedPrefix}tiktokimagen
> ╠𝐁𝐔𝐒𝐂𝐀𝐑
> ╠> ${usedPrefix}google
> ╠> ${usedPrefix}wikipedia
> ╠> ${usedPrefix}ytsearch
> ╠𝐁𝐎𝐓
> ╠> ${usedPrefix}serbot
> ╠> ${usedPrefix}radio
> ╠𝐆𝐑𝐔𝐏𝐎𝐒
> ╠> ${usedPrefix}invocar
> ╠> ${usedPrefix}del
> ╠> ${usedPrefix}chau
> ╠> ${usedPrefix}join
> ╠> ${usedPrefix}listanum/kicknum
> ╠𝐉𝐔𝐄𝐆𝐎𝐒
> ╠> ${usedPrefix}ttt
> ╠> ${usedPrefix}acertijo
> ╚𝐌𝐄𝐍𝐔 𝐄𝐍 𝐏𝐑𝐎𝐂𝐄𝐒𝐎...

`.trim();

let handler = async (m, { conn, usedPrefix: _p, __dirname }) => {
 try {
    let package = JSON.parse(await promises.readFile(join(dirname, '../package.json')).catch( => ({}))) || {}
    let { exp, limit, level } = global.db.data.users[m.sender]
    let { min, xp, max } = xpRange(level, global.multiplier)
    let name = await conn.getName(m.sender)
    let d = new Date(new Date + 3600000)
    let locale = 'es'
    // d.getTimeZoneOffset()
    // Offset -420 is 18.00
    // Offset    0 is  0.00
    // Offset  420 is  7.00
    let weton = ['Pahing', 'Pon', 'Wage', 'Kliwon', 'Legi'][Math.floor(d / 84600000) % 5]
    let week = d.toLocaleDateString(locale, { weekday: 'long' })
    let date = d.toLocaleDateString(locale, {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    })
    let dateIslamic = Intl.DateTimeFormat(locale + '-TN-u-ca-islamic', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    }).format(d)
    let time = d.toLocaleTimeString(locale, {
      hour: 'numeric',
      minute: 'numeric',
      second: 'numeric'
    })
    let _uptime = process.uptime() * 1000
    let _muptime
    if (process.send) {
      process.send('uptime')
      _muptime = await new Promise(resolve => {
        process.once('message', resolve)
        setTimeout(resolve, 1000)
      }) * 1000
    }
    let muptime = clockString(_muptime)
    let uptime = clockString(_uptime)
    let totalreg = Object.keys(global.db.data.users).length
    let rtotalreg = Object.values(global.db.data.users).filter(user => user.registered == true).length
    let help = Object.values(global.plugins).filter(plugin => !plugin.disabled).map(plugin => {
      return {
        help: Array.isArray(plugin.tags) ? plugin.help : [plugin.help],
        tags: Array.isArray(plugin.tags) ? plugin.tags : [plugin.tags],
        prefix: 'customPrefix' in plugin,
        limit: plugin.limit,
        premium: plugin.premium,
        enabled: !plugin.disabled,
      }
    })
    for (let plugin of help)
      if (plugin && 'tags' in plugin)
        for (let tag of plugin.tags)
          if (!(tag in tags) && tag) tags[tag] = tag
    conn.menu = conn.menu ? conn.menu : {}
    let before = conn.menu.before || defaultMenu.before
    let header = conn.menu.header || defaultMenu.header
    let body = conn.menu.body || defaultMenu.body
    let footer = conn.menu.footer || defaultMenu.footer
    let after = conn.menu.after || (conn.user.jid == global.conn.user.jid ? '' : ``) + defaultMenu.after
    let _text = [
      before,
      ...Object.keys(tags).map(tag => {
        return header.replace(/%category/g, tags[tag]) + '\n' + [
          ...help.filter(menu => menu.tags && menu.tags.includes(tag) && menu.help).map(menu => {
            return menu.help.map(help => {
              return body.replace(/%cmd/g, menu.prefix ? help : '%p' + help)
                .replace(/%isstar/g, menu.star ? '˄' : '')
                .replace(/%isPremium/g, menu.premium ? '˄' : '')
                .trim()
            }).join('\n')
          }),
          footer
        ].join('\n')
      }),
      after
    ].join('\n')
    let text = typeof conn.menu == 'string' ? conn.menu : typeof conn.menu == 'object' ? _text : ''
    let replace = {
      '%': '%',
      p: _p, uptime, muptime,
      taguser: '@' + m.sender.split("@s.whatsapp.net")[0],
      wasp: '@0',
      me: conn.getName(conn.user.jid),
      npmname: _package.name,
      version: _package.version,
      npmdesc: _package.description,
      npmmain: _package.main,
      author: _package.author.name,
      license: _package.license,
      exp: exp - min,
      maxexp: xp,
      totalexp: exp,
      xp4levelup: max - exp,
      github: _package.homepage ? _package.homepage.url || _package.homepage : '[unknown github url]',
      level, limit, name, weton, week, date, dateIslamic, time, totalreg, rtotalreg,
      readmore: readMore
    }
    text = text.replace(new RegExp(%(${Object.keys(replace).sort((a, b) => b.length - a.length).join|}), 'g'), (_, name) => '' + replace[name])
    
     let pp = 'https://telegra.ph/file/71a5edb69bbac896a0444.mp4'
     let pp2 = 'https://telegra.ph/file/a1a881102bfa01aea20b8.mp4'
    conn.sendMessage(m.chat, { video: { url: [pp, pp2].getRandom() }, gifPlayback: true, caption: text.trim(), mentions: [m.sender] }, { quoted: m })
    
  } catch (e) {
    conn.reply(m.chat, 'el menú tiene un error', m)
    throw e
  }
}

handler.help = ['menu']
handler.command = ['test', 'Comandos', 'cmds'] 
export default handler


const more = String.fromCharCode(8206)
const readMore = more.repeat(4001)

function clockString(ms) {
  let h = isNaN(ms) ? '--' : Math.floor(ms / 3600000)
  let m = isNaN(ms) ? '--' : Math.floor(ms / 60000) % 60
  let s = isNaN(ms) ? '--' : Math.floor(ms / 1000) % 60
  return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':')
}
